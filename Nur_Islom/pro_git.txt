										Pro Git by Scott Chacon and Ben Straub

	The first thing you should do when you install Git is to set your user name and e-mail address. This is important because every Git
commit uses this information, and it's immutably baked into the commits you start to creating:

	git config --global user.name "stoicist"
	git config --global user.email hm1544727@gmail.com

	After that, you can configure the default text editor that will be used when Git needs you to type in a message. Default editor is 
Vim.

	git config --global core.editor [editor_name]

For checking these setting type:

	git config --list

You can also check a specific key's value by typing it:

	git config [key]

If you ever need help about some git's command, there are two ways to get help:

	git help [command]

	man git-[command]

These commands are nice because you can access them anywhere, even offline. If the manpages and this book aren’t enough and you need in-person help, you can try the #git or #github channel on the Freenode IRC server (irc. freenode.net). These channels are regularly filled with hundreds of people who are all very knowledgeable about Git and are often willing to help.

--------------------------------------------------------------------------------------------------------------------------------------

Getting a Git Repository You can get a Git project using two main approaches. The first takes an existing project or directory and imports it into Git. The second clones an existing Git repository from another server. Initializing a Repository in an Existing Directory If you’re starting to track an existing project in Git, you need to go to the project’s directory and type

	git init

This creates a new subdirectory named .git that contains all your necessary repository files—a Git repository skeleton. At this point, nothing in your project is tracked yet. After that do these:

	git add *.c
	
	git add LICENCE

	git commit -m 'initial project version'

Cloning an existing repository
	
	git clone [url]		example of this: git clone https://github.com/libgit2/libgit2

This command will copy every version of every file for the history of the project is pulled down by default when you run git clone.
That creates a directory named libgit2, initializes a .git directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version. If you go into the new libgit2 directory, you’ll see the project files in there, ready to be worked on or used. If you want to clone the repository into a directory named something other than libgit2, you can specify that as the next command-line option:

	git clone https://github.com/libgit2/libgit2 project_libgit

Checking the Status of Your Files
The main tool you use to determine which files are in which state is the git status command. If you run this command directly after a clone, you should see something like this:

	git status
	On branch master
	nothing to commit, working directory clean

This means you have a clean working directory—in other words, there are no tracked and modified files.

In order to tracking new file into Git, you should use command:

	git add [file]
or
	git add [file] [file] [file] ...
or 	
	git add -all
or
	git add .

If you run git status -s or git status --short you get a far more simplified output from the command.

	git status -s    or    git status --short

	git status -s
	 M  README
	MM Rakefile
	A  lib/git.rb		=>	new files that have been added to the staging are have A
	M  lib/simple.rb	=>	modified files have M
	?? LICENCE.txt		=>	new files that aren't traced have ??
There are two columns to the output-the left hand column indicates that the file is staged and the right hand column indicates that it’s modified. So for example in that output, the README file is modified in the working directory but not yet staged, while the lib/simplegit.rb file is modified and staged. The Rakefile was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.

	--Ignoring files--

Often, you’ll have a class of files that you don’t want Git to automatically add or even show you as being untracked. These are generally automatically generated files such as log files or files produced by your build system. In such cases, you can create a file listing patterns to match them named .gitignore. Here is an example .gitignore file:
	
	cat .gitignore
	*.[oa]
	*~
	.class
 
	The first line tells Git to ignore any files ending in “.o” or “.a”—object and archive files that may be the product of building your code. The second line tells Git to ignore all files that end with a tilde (~), which is used by many text editors such as Emacs to mark temporary files. You may also include a log, tmp, or pid directory; automatically generated documentation; and so on. Setting up a .gitignore file before you get going is generally a good idea so you don’t accidentally commit files that you really don’t want in your Git repository. The rules for the patterns you can put in the .gitignore file are as follows:
 • Blank lines or lines starting with # are ignored.
 • Standard glob patterns work. 
 • You can end patterns with a forward slash (/) to specify a directory.
 • You can negate a pattern by starting it with an exclamation point (!).

Glob patterns are like simplified regular expressions that shells use. An asterisk (*) matches zero or more characters; [abc] matches any character inside the brackets (in this case a, b, or c); a question mark (?) matches a single character; and brackets enclosing characters separated by a hyphen ([0-9]) matches any character between them (in this case 0 through 9). You can also use two asterisks to match nested directories; a/**/z would match a/z, a/b/z,a/b/c/z, and so on. Here is another example .gitignore file:

# a comment - this is ignored 
*.a 		# no .a files 
!lib.a 		# but do track lib.a, even though you're ignoring .a files above 
/TODO		# only ignore the root TODO file, but not subdir /TODO
build/		# ignore all files in the build/ directory
doc/*.txt	# ignore doc/notes.txt, but not doc/server/arch.txt

If the git status command is too vague for you—you want to know exactly what you changed, not just which files were changed—you can use the git diff command. To see what you’ve changed but not yet staged, type git diff with no other arguments:

	git diff

If you want to see what you’ve staged that will go into your next commit, you can use git diff --staged. This command compares your staged changes to your last commit:

	git diff --staged

It’s important to note that git diff by itself doesn’t show all changes made since your last commit—only changes that are still unstaged. This can be confusing, because if you’ve staged all your changes, git diff will give you no output.

Use this method to see what you staged so far:

	git diff --cached

	----Committing Your Changes----
Now that your staging area is set up the way you want it, you can commit your changes. Remember that anything that is still unstaged—any files you have created or modified that you haven’t run git add on since you edited them— won’t go into this commit. They will stay as modified files on your disk. In this case, let’s say that the last time you ran git status, you saw that everything was staged, so you’re ready to commit your changes. The simplest way to commit is to type git commit:
	
	git commit

Doing so launches your editor of choice. (This is set by your shell’s $EDITOR environment variable—usually vim or emacs, although you can configure it with whatever you want using the git config --global core.editor command as you saw in Chapter 1).

You can see that the default commit message contains the latest output of the git status command commented out and one empty line on top. You can remove these comments and type your commit message, or you can leave them there to help you remember what you’re committing. (For an even more explicit reminder of what you’ve modified, you can pass the -v option to git commit. Doing so also puts the diff of your change in the editor so you can see exactly what changes you’re committing). When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out.
Alternatively, you can type your commit message inline with the commit command by specifying it after a -m flag, like this:
	
	git commit -m "Story 182: Fix benchmarks for speed"

	----Skipping the Staging Area----

Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow. If you want to skip the staging area, Git provides a simple shortcut. Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part:

	git commit -a -m 'added new benchmarks'

	----Removing Files----
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit. The git rm command does that, and also removes the file from your working directory so you don’t see it as an untracked file the next time around. If you simply remove the file from your working directory, it shows up under the “Changed but not updated” (that is, unstaged) area of your git status output:

	rm grit.gemspec 
	git status 
	On branch master Changes not staged for commit: 
	(use "git add/rm <file>..." to update what will be committed) 
	(use "git checkout -- <file>..." to discard changes in working directory) 
	deleted: grit.gemspec no changes added to commit 
	(use "git add" and/or "git commit -a")

Then, if you run git rm, it stages the file’s removal: 

	git rm grit.gemspec 
	rm 'grit.gemspec' 
	git status 
	On branch master Changes to be committed: 
	(use "git reset HEAD <file>..." to unstage) 
	deleted: grit.gemspec

The next time you commit, the file will be gone and no longer tracked. If you modified the file and added it to the index already, you must force the removal with the -f option. This is a safety feature to prevent accidental removal of data that hasn’t yet been recorded in a snapshot and that can’t be recovered from Git. 
Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area. In other words, you may want to keep the file on your hard drive but not have Git track it anymore. This is particularly useful if you forgot to add something to your .gitignore file and accidentally added it, like a large log file or a bunch of .a compiled files. To do this, use the --cached option:

	git rm --cached README

You can pass files, directories, and file-glob patterns to the git rm command. That means you can do things such as

	git rm log/\*.log

Note the backslash (\) in front of the *. This is necessary because Git does its own filename expansion in addition to your shell’s filename expansion. This command removes all files that have the .log extension in the log/ directory. Or, you can do something like this:

	git rm \*~

This command removes all files that end with ~.

	----Moving Files----

Unlike many other VCS systems, Git doesn’t explicitly track file movement. If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file; however, Git is pretty smart about figuring that out after the fact. We’ll deal with detecting file movement a bit later. Thus it’s a bit confusing that Git has a mv command. If you want to rename a file in Git, you can run something like: 

	git mv file_from file_to 

and it works fine. In fact, if you run something like this and look at the status, you’ll see that Git considers it a renamed file:

	git mv README.md README 
	git status 
	On branch master 
	Changes to be committed: 
	(use "git reset HEAD <file>..." to unstage) 
	renamed: README.md -> README

However, this is equivalent to running something like this:

	mv README.md README 
	git rm README.md 
	git add README 

Git figures out that it’s a rename implicitly, so it doesn’t matter if you rename a file that way or with the mv command. The only real difference is that mv is one command instead of three—it’s a convenience function. More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.

	----Undoing Things----

At any stage, you may want to undo something. Here, we’ll review a few basic tools for undoing changes that you’ve made. Be careful, because you can’t always undo some of these undos. This is one of the few areas in Git where you may lose some work if you do it wrong. One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message. If you want to try that commit again, you can run commit with the --amend option: 
	
	git commit –amend 

This command takes your staging area and uses it for the commit. If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you’ll change is your commit message. The same commit-message editor fires up, but it already contains the message of your previous commit. You can edit the message the same as always, but it overwrites your previous commit.

As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this: 

	git commit -m 'initial commit' 
	git add forgotten_file 
	git commit --amend 

You end up with a single commit—the second commit replaces the results of the first.

	----Unstaging a Staged File----

 The next two sections demonstrate how to wrangle your staging area and working directory changes. The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them. For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type git add * and stage them both. How can you unstage one of the two? The git status command reminds you:

	git add . 
	git status 
	On branch master Changes to be committed: 
	(use "git reset HEAD <file>..." to unstage) 
	renamed: README.md -> README 
	modified: benchmarks.rb 
	
Right below the “Changes to be committed” text, it says use git reset HEAD <file>... to unstage. So, let’s use that advice to unstage the benchmarks.rb file: 

	git reset HEAD benchmarks.rb 
	Unstaged changes after reset: M benchmarks.rb 
	git status 
	On branch master 
	Changes to be committed: 
	(use "git reset HEAD <file>..." to unstage) 
	renamed: README.md -> README
	Changes not staged for commit: 
	(use "git add <file>..." to update what will be committed) 
	(use "git checkout -- <file>..." to discard changes in working directory) 
	modified: benchmarks.rb 
	
The command is a bit strange, but it works. The benchmarks.rb file is modified but once again unstaged.

